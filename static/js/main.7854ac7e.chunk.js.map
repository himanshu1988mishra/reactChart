{"version":3,"sources":["components/Chart.js","App.js","index.js"],"names":["Chart","props","result","App","RESULT","useState","inputValue","setInputValue","chartName","setChartName","initialChartData","CHART_DATA","setCHARTDATA","LINE_DATA_SETS","label","data","backgroundColor","borderColor","tension","BAR_DATA_SETS","DOUGHNUT_DATA_SETS","initialOptions","OPTIONS","datasets","options","className","style","padding","name","id","value","onChange","e","target","type","marginRight","onClick","filteredData","map","item","filter","ReactDOM","render","StrictMode","labels","responsive","maintainAspectRatio","aspectRatio","scales","xAxes","grid","display","title","text","yAxes","beginAtZero","plugins","align","top","bottom","legend","position","document","getElementById"],"mappings":"sNASeA,EAPD,SAACC,GAAa,OACxB,8BACGA,EAAMC,U,aCoIEC,MAlIf,SAAaF,GACX,IAAIG,EAAS,GAGb,EAAoCC,mBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAGA,EAAmCJ,mBAASJ,EAAMS,kBAAlD,mBAAOC,EAAP,KAAmBC,EAAnB,KAGMC,EAAiB,CACrB,CACEC,MAAO,iBACPC,KAAMJ,EAAW,GACjBK,gBAAiB,OACjBC,YAAa,oBACbC,QAAS,IAEX,CACEJ,MAAO,kBACPC,KAAMJ,EAAW,GACjBK,gBAAiB,OACjBC,YAAa,oBACbC,QAAS,IAEX,CACEJ,MAAO,8BACPC,KAAMJ,EAAW,GACjBK,gBAAiB,OACjBC,YAAa,uBACbC,QAAS,KAGPC,EAAgB,CACpB,CACEL,MAAO,iBACPC,KAAMJ,EAAW,GACjBK,gBAAiB,qBAEnB,CACEF,MAAO,kBACPC,KAAMJ,EAAW,GACjBK,gBAAiB,qBAEnB,CACEF,MAAO,8BACPC,KAAMJ,EAAW,GACjBK,gBAAiB,wBAGfI,EAAqB,CACzB,CACEN,MAAO,iBACPC,KAAMJ,EAAW,GACjBK,gBAAiB,qBAEnB,CACEF,MAAO,kBACPC,KAAMJ,EAAW,GACjBK,gBAAiB,qBAEnB,CACEF,MAAO,8BACPC,KAAMJ,EAAW,GACjBK,gBAAiB,wBAKrB,EAA8BX,mBAASJ,EAAMoB,gBAA7C,mBAAOC,EAAP,KA8BA,OA9BA,KAekB,SAAdd,GACFP,EAAMc,KAAKQ,SAAX,UAA0BV,GAC1BT,EAAS,cAAC,IAAD,CAAMW,KAAMd,EAAMc,KAAMS,QAASF,KACnB,QAAdd,GACTP,EAAMc,KAAKQ,SAAX,UAA0BJ,GAC1Bf,EAAS,cAAC,IAAD,CAAKW,KAAMd,EAAMc,KAAMS,QAASF,KAClB,aAAdd,GACTP,EAAMc,KAAKQ,SAAX,UAA0BH,GAC1BhB,EAAS,cAAC,IAAD,CAAUW,KAAMd,EAAMc,KAAMS,QAASF,MAE9CrB,EAAMc,KAAKQ,SAAX,UAA0BJ,GAC1Bf,EAAS,cAAC,IAAD,CAAKW,KAAMd,EAAMc,KAAMS,QAASF,KAKzC,0BAASG,UAAU,MAAnB,UACE,8BAEE,yBAAQC,MAAO,CAAEC,QAAS,OAASC,KAAK,GAAGC,GAAG,GAAGC,MAAOtB,EAAWuB,SAAU,SAAAC,GAAC,OAAIvB,EAAauB,EAAEC,OAAOH,QAAxG,UACE,wBAAQA,MAAM,GAAd,+BACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,WAAd,2BAKJ,yBAASL,UAAU,QAAnB,SACE,cAAC,EAAD,CAAOvB,OAAQE,MAIjB,sBAAKqB,UAAU,UAAf,UACE,uBAAOS,KAAK,SAASJ,MAAOxB,EAAYyB,SAAU,SAAAC,GAAC,OAAIzB,EAAcyB,EAAEC,OAAOH,UAE9E,sBAAKL,UAAU,gBAAf,UACE,yBAAQC,MAAO,CAAES,YAAa,OAASC,QAjD3B,WAClB,IAAIC,EAAe1B,EAAW2B,KAAI,SAAAC,GAAI,OAAIA,EAAKC,QAAO,SAAAV,GAAK,OAAIA,EAAQxB,QACvEM,EAAayB,IA+CP,2BAA4E/B,EAA5E,OACA,wBAAQ8B,QA5CG,WACjBxB,EAAaX,EAAMS,kBACnBH,EAAc,IA0CR,6BCrEVkC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CACE5B,KAzDO,CACX6B,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACnDrB,SAAU,IAwDNb,iBArDqB,CACzB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACzB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACzB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAmDrBW,eA/CkB,CACtBwB,YAAY,EACZC,qBAAqB,EACrBC,YAAa,EACbC,OAAQ,CACNC,MAAO,CACLC,KAAM,CACJC,SAAS,GAEXC,MAAO,CACLD,SAAS,EACTE,KAAM,WAGVC,MAAO,CACLC,aAAa,EACbL,KAAM,CACJC,SAAS,GAEXC,MAAO,CACLD,SAAS,EACTE,KAAM,YAIZG,QAAS,CACPJ,MAAO,CACLD,SAAS,EACTE,KAAM,gBACNI,MAAO,SACP9B,QAAS,CACP+B,IAAK,GACLC,OAAQ,KAGZC,OAAQ,CACNT,SAAS,EACTU,SAAU,gBAadC,SAASC,eAAe,W","file":"static/js/main.7854ac7e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Chart = (props) => {  return (\r\n    <div>\r\n      {props.result}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chart","import { useState } from 'react';\r\nimport Chart from './components/Chart';\r\nimport { Line, Bar, Doughnut } from 'react-chartjs-2';\r\nimport './App.css';\r\n\r\n\r\nfunction App(props) {\r\n  let RESULT = '';\r\n\r\n  // Form\r\n  const [inputValue, setInputValue] = useState(0);\r\n  const [chartName, setChartName] = useState('');\r\n\r\n  // Chart Data\r\n  const [CHART_DATA, setCHARTDATA] = useState(props.initialChartData);\r\n\r\n  // DataSets\r\n  const LINE_DATA_SETS = [\r\n    {\r\n      label: 'Current Actual',\r\n      data: CHART_DATA[0],\r\n      backgroundColor: '#fff',\r\n      borderColor: 'rgba(255,0,0,0.5)',\r\n      tension: 0.4,\r\n    },\r\n    {\r\n      label: 'Previous Period',\r\n      data: CHART_DATA[1],\r\n      backgroundColor: '#fff',\r\n      borderColor: 'rgba(0,0,255,0.5)',\r\n      tension: 0.4,\r\n    },\r\n    {\r\n      label: 'Upcoming Period - No Bezier',\r\n      data: CHART_DATA[2],\r\n      backgroundColor: '#fff',\r\n      borderColor: 'rgba(255,255,0, 0.5)',\r\n      tension: 0.4,\r\n    }\r\n  ];\r\n  const BAR_DATA_SETS = [\r\n    {\r\n      label: 'Current Actual',\r\n      data: CHART_DATA[0],\r\n      backgroundColor: 'rgba(255,0,0,0.5)'\r\n    },\r\n    {\r\n      label: 'Previous Period',\r\n      data: CHART_DATA[1],\r\n      backgroundColor: 'rgba(0,0,255,0.5)'\r\n    },\r\n    {\r\n      label: 'Upcoming Period - No Bezier',\r\n      data: CHART_DATA[2],\r\n      backgroundColor: 'rgba(255,255,0,0.5)'\r\n    }\r\n  ];\r\n  const DOUGHNUT_DATA_SETS = [\r\n    {\r\n      label: 'Current Actual',\r\n      data: CHART_DATA[0],\r\n      backgroundColor: 'rgba(255,0,0,0.5)'\r\n    },\r\n    {\r\n      label: 'Previous Period',\r\n      data: CHART_DATA[1],\r\n      backgroundColor: 'rgba(0,0,255,0.5)'\r\n    },\r\n    {\r\n      label: 'Upcoming Period - No Bezier',\r\n      data: CHART_DATA[2],\r\n      backgroundColor: 'rgba(255,255,0,0.5)'\r\n    }\r\n  ];\r\n\r\n  // Options\r\n  const [OPTIONS, setOPTIONS] = useState(props.initialOptions)\r\n\r\n  // Filter Data\r\n  const FILTER_DATA = () => {\r\n    let filteredData = CHART_DATA.map(item => item.filter(value => value > inputValue));\r\n    setCHARTDATA(filteredData);\r\n  }\r\n\r\n  // Reset Data\r\n  const RESET_DATA = () => {\r\n    setCHARTDATA(props.initialChartData);\r\n    setInputValue(0);\r\n  }\r\n\r\n  // ChartName Change_Logic\r\n  if (chartName === 'line') {\r\n    props.data.datasets = [...LINE_DATA_SETS]\r\n    RESULT = <Line data={props.data} options={OPTIONS} />\r\n  } else if (chartName === 'bar') {\r\n    props.data.datasets = [...BAR_DATA_SETS]\r\n    RESULT = <Bar data={props.data} options={OPTIONS} />\r\n  } else if (chartName === 'doughnut') {\r\n    props.data.datasets = [...DOUGHNUT_DATA_SETS]\r\n    RESULT = <Doughnut data={props.data} options={OPTIONS} />\r\n  } else {\r\n    props.data.datasets = [...BAR_DATA_SETS]\r\n    RESULT = <Bar data={props.data} options={OPTIONS} />\r\n  }\r\n\r\n\r\n  return (\r\n    <section className=\"App\">\r\n      <div>\r\n        {/* Dropdown */}\r\n        <select style={{ padding: '5px' }} name=\"\" id=\"\" value={chartName} onChange={e => setChartName(e.target.value)}>\r\n          <option value=\"\">Select Chart Type</option>\r\n          <option value=\"line\">Line</option>\r\n          <option value=\"bar\">Bar</option>\r\n          <option value=\"doughnut\">Doughnut</option>\r\n        </select>\r\n      </div>\r\n\r\n      {/* Chart */}\r\n      <article className=\"chart\">\r\n        <Chart result={RESULT} />\r\n      </article>\r\n\r\n      {/* Filter Control */}\r\n      <div className=\"filters\">\r\n        <input type=\"number\" value={inputValue} onChange={e => setInputValue(e.target.value)} />\r\n\r\n        <div className=\"filterButtons\">\r\n          <button style={{ marginRight: '5px' }} onClick={FILTER_DATA}> Greater than {inputValue} </button>\r\n          <button onClick={RESET_DATA}>Reset</button>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n// Data\nconst DATA = {\n  labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n  datasets: []\n}\n\nconst INITIAL_CHART_DATA = [\n  [65, 50, 83, 75, 45, 40, 30],\n  [35, 45, 40, 20, 80, 25, 85],\n  [45, 20, 40, 60, 35, 15, 75]\n];\n\n// Options\nconst INITIAL_OPTIONS = {\n  responsive: true,\n  maintainAspectRatio: true,\n  aspectRatio: 2,\n  scales: {\n    xAxes: {\n      grid: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: 'Months'\n      }\n    },\n    yAxes: {\n      beginAtZero: true,\n      grid: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: 'Values'\n      }\n    }\n  },\n  plugins: {\n    title: {\n      display: true,\n      text: 'Volume Trends',\n      align: 'center',\n      padding: {\n        top: 20,\n        bottom: 30,\n      }\n    },\n    legend: {\n      display: true,\n      position: 'bottom'\n    },\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App\n      data={DATA}\n      initialChartData={INITIAL_CHART_DATA}\n      initialOptions={INITIAL_OPTIONS}\n    />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}